{"version":3,"sources":["components/Editor.jsx","components/ChangeMode.jsx","components/VideoChat.jsx","components/Connection.jsx","components/App.jsx","index.js"],"names":["editorInstance","Editor","React","memo","props","useContext","ConnectionContext","value","text","style","textAlign","editorProps","$blockScrolling","fontSize","height","highlightActiveLine","mode","margin","maxWidth","name","onChange","canWrite","editText","getValue","setText","dataConnection","data","send","onLoad","newEditorInstance","showPrintMargin","tabSize","theme","readOnly","width","wrapEnabed","ChangeMode","setValue","display","justifyContent","alignItems","marginY","marginLeft","checked","VideoChat","localVideo","remoteVideo","useState","muted","setmuted","marginTop","marginBottom","autoPlay","playsInline","ref","peer","Peer","key","process","Connection","myId","setMyId","callId","setCallId","setDataConnection","setEditText","ready","setReady","useRef","on","id","current","navigator","mediaDevices","getUserMedia","video","audio","then","localStream","srcObject","receiveData","hasOwnProperty","receiveDataConnection","mediaConnection","answer","stream","a","e","target","onClick","call","play","catch","console","error","connect","createContext","App","Provider","padding","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c93d642.chunk.js","sourcesContent":["import \"ace-builds/src-noconflict/ace\";\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\nimport \"ace-builds/src-noconflict/theme-chaos\";\nimport React, { useContext } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport { ConnectionContext } from \"./App\";\nlet editorInstance = null;\n\n/* エディタ画面コンポーネント */\nexport const Editor = React.memo(\n  (props) => {\n    const [value] = useContext(ConnectionContext);\n    const text = props.text;\n\n    /* エディタ画面に変化があった場合 */\n    const onChange = () => {\n      if (value.canWrite === true) {\n        const editText = editorInstance.getValue();\n        props.setText(editText)\n        const { dataConnection } = props;\n        const data = { canWrite: value.canWrite, editText };\n        dataConnection.send(data);\n      }\n    };\n    /* editorInstance作成後 */\n    const onLoad = (newEditorInstance) => {\n      editorInstance = newEditorInstance;\n    };\n\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h2>Share Code</h2>\n        <AceEditor\n          editorProps={{ $blockScrolling: \"true\" }}\n          fontSize=\"16px\"\n          height=\"500px\"\n          highlightActiveLine={false}\n          mode=\"c_cpp\"\n          style={{ margin: \"auto\", maxWidth: \"1024px\" }}\n          name=\"UNIQUE_ID_OF_DIV\"\n          onChange={onChange}\n          onLoad={onLoad}\n          showPrintMargin={false}\n          tabSize={4}\n          theme=\"chaos\"\n          readOnly={!value.canWrite}\n          value={text}\n          width=\"80%\"\n          wrapEnabed={false}\n        />\n      </div>\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport Switch from \"react-ios-switch\";\n\nimport { ConnectionContext } from \"./App\";\n\n/* モード切り替えコンポーネント */\nexport const ChangeMode = ({ dataConnection }) => {\n  const [value, setValue] = useContext(ConnectionContext);\n  const updateHandler = (canWrite) => {\n    dataConnection.send({canWrite: canWrite})\n    setValue({\n      ...value,\n      canWrite: canWrite,\n    });\n  };\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      {value.canWrite && <h3 style={{ marginY: \"auto\" }}>書き込みモード</h3>}\n      {!value.canWrite && <h3 style={{ marginY: \"auto\" }}>読み込みモード</h3>}\n\n      {/* スイッチボタンコンポーネント */}\n      <Switch\n        style={{ marginLeft: \"10px\" }}\n        checked={value.canWrite}\n        onChange={(checked) => updateHandler(checked)}\n      />\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport Switch from \"react-ios-switch\";\n\n/* テレビ電話コンポーネント */\nexport const VideoChat = ({ localVideo, remoteVideo }) => {\n  const [muted, setmuted] = useState(true);\n  return (\n    <>\n      <div\n        style={{\n          display: \"flex\",\n          maxWidth: \"1000px\",\n          marginLeft: \"10%\",\n        }}\n      >\n        <h3>音声</h3>\n\n        {/* スイッチボタンコンポーネント */}\n        <Switch\n          style={{ marginLeft: \"20px\" , marginTop: \"auto\", marginBottom: \"auto\"}}\n          checked={!muted}\n          onChange={(checked) => {\n            setmuted(!checked);\n          }}\n        />\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"space-around\",\n          maxWidth: \"1000px\",\n          margin: \"auto\",\n        }}\n      >\n        {/* 自分のビデオ画面 */}\n        <div style={{ width: \"40%\" }}>\n          <video\n            width=\"100%\"\n            autoPlay\n            muted\n            playsInline\n            style={{ maxWidth: \"400px\" }}\n            ref={localVideo}\n          ></video>\n        </div>\n        {/* 相手のビデオ画面 */}\n        <div style={{ width: \"40%\", textAlign: \"center\" }}>\n          <video\n            width=\"100%\"\n            autoPlay\n            muted={muted}\n            playsInline\n            style={{ maxWidth: \"400px\" }}\n            ref={remoteVideo}\n          ></video>\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useRef, useState, useContext } from \"react\";\nimport Peer from \"skyway-js\";\nimport { Editor } from \"./Editor\";\nimport { ChangeMode } from \"./ChangeMode\";\nimport { VideoChat } from \"./VideoChat\";\nimport { ConnectionContext } from \"./App\";\n\n// APIキーを利用し、peerを作成\nconst peer = new Peer({ key: process.env.REACT_APP_SKYWAY_KEY });\nexport const Connection = () => {\n  const [value, setValue] = useContext(ConnectionContext);\n  const [myId, setMyId] = useState(\"\");\n  const [callId, setCallId] = useState(\"\");\n  const [dataConnection, setDataConnection] = useState(\"\");\n  const [editText, setEditText] = useState(\"\");\n  const [ready, setReady] = useState(false);\n  const localVideo = useRef(null);\n  const remoteVideo = useRef(null);\n\n  /* 接続開始時に実行 */\n  peer.on(\"open\", () => {\n    setMyId(peer.id);\n    if (localVideo.current !== null) {\n      /* カメラの設定 */\n      navigator.mediaDevices\n        .getUserMedia({ video: true, audio: true })\n        .then((localStream) => {\n          localVideo.current.srcObject = localStream;\n        });\n    }\n  });\n  const receiveData = (data) => {\n    if (data.hasOwnProperty(\"editText\")) {\n      setEditText(data.editText);\n    }\n    /* 相手が書き込みモードの場合、自分は読み込みモードに変更する。逆も同様 */\n    setValue({\n      ...value,\n      canWrite: !data.canWrite,\n    });\n  };\n\n  /* 接続要求を送信 */\n  const makeConnection = () => {\n    const mediaConnection = peer.call(callId, localVideo.current.srcObject);\n    mediaConnection.on(\"stream\", async (stream) => {\n      remoteVideo.current.srcObject = stream;\n      await remoteVideo.current.play().catch(console.error);\n    });\n    setReady(true);\n    const dataConnection = peer.connect(callId);\n    setDataConnection(dataConnection);\n\n    dataConnection.on(\"data\", (data) => {\n      receiveData(data);\n    });\n  };\n\n  /* 接続要求を受信時 */\n  peer.on(\"connection\", (receiveDataConnection) => {\n    /* 初期接続時 */\n    setDataConnection(receiveDataConnection);\n    /* メッセージ受信 */\n    receiveDataConnection.on(\"data\", (data) => {\n      receiveData(data);\n    });\n    setReady(true);\n  });\n\n  /* ビデオ電話要求を受信 */\n  peer.on(\"call\", (mediaConnection) => {\n    if (localVideo.current !== null) {\n      mediaConnection.answer(localVideo.current.srcObject);\n\n      mediaConnection.on(\"stream\", async (stream) => {\n        remoteVideo.current.srcObject = stream;\n      });\n    }\n  });\n  return (\n    <div>\n      {/* 接続準備中の時 */}\n      {!ready && (\n        <div style={{marginLeft: \"10%\"}}>\n          <div>{myId}</div>\n          <input onChange={(e) => setCallId(e.target.value)}></input>\n          <button onClick={makeConnection}>発信</button>\n        </div>\n      )}\n\n      {/* テレビ電話コンポーネント */}\n      <VideoChat localVideo={localVideo} remoteVideo={remoteVideo} />\n      {/* 接続が完了した時 */}\n      {ready && (\n        <>\n          {/* モード切り替えコンポーネント */}\n          <ChangeMode dataConnection={dataConnection} />\n          {/* エディタ画面コンポーネント */}\n          <Editor\n            text={editText}\n            setText={setEditText}\n            dataConnection={dataConnection}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { createContext, useState } from \"react\";\nimport { Connection } from \"./Connection\";\n\nexport const ConnectionContext = createContext();\n\nconst App = () => {\n  const [value, setValue] = useState({\n    canWrite: false,\n  });\n\n  return (\n    /* React Contextを利用するため、追加 */\n    <ConnectionContext.Provider value={[value, setValue]}>\n      <h1 style={{ textAlign: \"center\", padding: \"50px\" }}>\n        Simple Pair Programming\n      </h1>\n      {/* Connectionコンポーネント読み込み */}\n      <Connection />\n    </ConnectionContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}