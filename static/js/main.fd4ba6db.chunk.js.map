{"version":3,"sources":["components/Editor.jsx","components/App.jsx","components/Connection.jsx","index.js"],"names":["editorInstance","ConnectionContext","React","memo","props","useContext","value","text","style","textAlign","editorProps","$blockScrolling","fontSize","height","highlightActiveLine","mode","margin","maxWidth","name","onChange","canWrite","editText","getValue","setText","dataConnection","data","send","onLoad","newEditorInstance","showPrintMargin","tabSize","theme","readOnly","width","wrapEnabed","Peer","key","process","createContext","App","useState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAOIA,EAAiB,KCJRC,GDOSC,IAAMC,MAC1B,SAACC,GAAW,IAAD,EACOC,qBAAWJ,GAApBK,EADE,oBAEHC,EAAOH,EAAMG,KAiBnB,OACE,yBAAKC,MAAO,CAAEC,UAAW,WACvB,0CACA,kBAAC,IAAD,CACEC,YAAa,CAAEC,gBAAiB,QAChCC,SAAS,OACTC,OAAO,QACPC,qBAAqB,EACrBC,KAAK,QACLP,MAAO,CAAEQ,OAAQ,OAAQC,SAAU,UACnCC,KAAK,mBACLC,SAzBW,WACf,IAAuB,IAAnBb,EAAMc,SAAmB,CAC3B,IAAMC,EAAWrB,EAAesB,WAChClB,EAAMmB,QAAQF,GAFa,IAGnBG,EAAmBpB,EAAnBoB,eACFC,EAAO,CAAEL,SAAUd,EAAMc,SAAUC,YACzCG,EAAeE,KAAKD,KAoBlBE,OAhBS,SAACC,GACd5B,EAAiB4B,GAgBbC,iBAAiB,EACjBC,QAAS,EACTC,MAAM,QACNC,UAAW1B,EAAMc,SACjBd,MAAOC,EACP0B,MAAM,MACNC,YAAY,Q,MEzCT,IAAIC,IAAK,CAAEC,IAAKC,yCDLIC,2BAmBlBC,EAjBH,WAAO,IAAD,EACUC,mBAAS,CACjCpB,UAAU,IAFI,8BEDlBqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.fd4ba6db.chunk.js","sourcesContent":["import \"ace-builds/src-noconflict/ace\";\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\nimport \"ace-builds/src-noconflict/theme-chaos\";\nimport React, { useContext } from \"react\";\nimport AceEditor from \"react-ace\";\n\nimport { ConnectionContext } from \"./App\";\nlet editorInstance = null;\n\n/* エディタ画面コンポーネント */\nexport const Editor = React.memo(\n  (props) => {\n    const [value] = useContext(ConnectionContext);\n    const text = props.text;\n\n    /* エディタ画面に変化があった場合 */\n    const onChange = () => {\n      if (value.canWrite === true) {\n        const editText = editorInstance.getValue();\n        props.setText(editText)\n        const { dataConnection } = props;\n        const data = { canWrite: value.canWrite, editText };\n        dataConnection.send(data);\n      }\n    };\n    /* editorInstance作成後 */\n    const onLoad = (newEditorInstance) => {\n      editorInstance = newEditorInstance;\n    };\n\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h2>Share Code</h2>\n        <AceEditor\n          editorProps={{ $blockScrolling: \"true\" }}\n          fontSize=\"16px\"\n          height=\"500px\"\n          highlightActiveLine={false}\n          mode=\"c_cpp\"\n          style={{ margin: \"auto\", maxWidth: \"1024px\" }}\n          name=\"UNIQUE_ID_OF_DIV\"\n          onChange={onChange}\n          onLoad={onLoad}\n          showPrintMargin={false}\n          tabSize={4}\n          theme=\"chaos\"\n          readOnly={!value.canWrite}\n          value={text}\n          width=\"80%\"\n          wrapEnabed={false}\n        />\n      </div>\n    );\n  }\n);\n","import React, { createContext, useState } from \"react\";\nimport { Connection } from \"./Connection\";\n\nexport const ConnectionContext = createContext();\n\nconst App = () => {\n  const [value, setValue] = useState({\n    canWrite: false,\n  });\n\n  return (\n    // React Contextを利用するため、追加\n    <ConnectionContext.Provider value={[value, setValue]}>\n      <h1 style={{ textAlign: \"center\", padding: \"50px\" }}>\n        Simple Pair Programming\n      </h1>\n      {/* Connectionコンポーネント読み込み */}\n      <Connection />\n    </ConnectionContext.Provider>\n  );\n};\n\nexport default App;\n","import React, { useRef, useState, useContext } from \"react\";\nimport Peer from \"skyway-js\";\nimport { Editor } from \"./Editor\";\nimport { ChangeMode } from \"./ChangeMode\";\nimport { VideoChat } from \"./VideoChat\";\nimport { ConnectionContext } from \"./App\";\n\n// APIキーを利用し、peerを作成\nconst peer = new Peer({ key: process.env.REACT_APP_SKYWAY_KEY });\nexport const Connection = () => {\n  const [value, setValue] = useContext(ConnectionContext);\n  const [myId, setMyId] = useState(\"\");\n  const [callId, setCallId] = useState(\"\");\n  const [dataConnection, setDataConnection] = useState(\"\");\n  const [editText, setEditText] = useState(\"\");\n  const [ready, setReady] = useState(false);\n  const localVideo = useRef(null);\n  const remoteVideo = useRef(null);\n\n  /* 接続開始時に実行 */\n  peer.on(\"open\", () => {\n    setMyId(peer.id);\n    if (localVideo.current !== null) {\n      /* カメラの設定 */\n      navigator.mediaDevices\n        .getUserMedia({ video: true, audio: true })\n        .then((localStream) => {\n          localVideo.current.srcObject = localStream;\n        });\n    }\n  });\n  const receiveData = (data) => {\n    if (data.hasOwnProperty(\"editText\")) {\n      setEditText(data.editText);\n    }\n    /* 相手が書き込みモードの場合、自分は読み込みモードに変更する。逆も同様 */\n    setValue({\n      ...value,\n      canWrite: !data.canWrite,\n    });\n  };\n\n  /* 接続要求を送信 */\n  const makeConnection = () => {\n    const mediaConnection = peer.call(callId, localVideo.current.srcObject);\n    mediaConnection.on(\"stream\", async (stream) => {\n      remoteVideo.current.srcObject = stream;\n      await remoteVideo.current.play().catch(console.error);\n    });\n    setReady(true);\n    const dataConnection = peer.connect(callId);\n    setDataConnection(dataConnection);\n\n    dataConnection.on(\"data\", (data) => {\n      receiveData(data);\n    });\n  };\n\n  /* 接続要求を受信時 */\n  peer.on(\"connection\", (receiveDataConnection) => {\n    /* 初期接続時 */\n    setDataConnection(receiveDataConnection);\n    /* メッセージ受信 */\n    receiveDataConnection.on(\"data\", (data) => {\n      receiveData(data);\n    });\n    setReady(true);\n  });\n\n  /* ビデオ電話要求を受信 */\n  peer.on(\"call\", (mediaConnection) => {\n    if (localVideo.current !== null) {\n      mediaConnection.answer(localVideo.current.srcObject);\n\n      mediaConnection.on(\"stream\", async (stream) => {\n        remoteVideo.current.srcObject = stream;\n      });\n    }\n  });\n  return (\n    <div>\n      {/* 接続準備中の時 */}\n      {!ready && (\n        <div style={{marginLeft: \"10%\"}}>\n          <div>{myId}</div>\n          <input onChange={(e) => setCallId(e.target.value)}></input>\n          <button onClick={makeConnection}>発信</button>\n        </div>\n      )}\n\n      {/* テレビ電話コンポーネント */}\n      <VideoChat localVideo={localVideo} remoteVideo={remoteVideo} />\n      {/* 接続が完了した時 */}\n      {ready && (\n        <>\n          {/* モード切り替えコンポーネント */}\n          <ChangeMode dataConnection={dataConnection} />\n          {/* エディタ画面コンポーネント */}\n          <Editor\n            text={editText}\n            setText={setEditText}\n            dataConnection={dataConnection}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}